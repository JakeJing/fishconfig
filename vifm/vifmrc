" You can edit this file by hand.
" The " character at the beginning of a line comments out the line.
" Blank lines are ignored.
" The basic format for each item is shown with an example.
" ------------------------------------------------------------------------------
"
" enable ls colors in folder preview
" fileviewer */ ls --color=always
" fileviewer .*/ ls --color=always

" set format of statusline
" set statusline="%1*%A %2* %u:%g %1* %10E %2* 👉 %d %1* %{extcached('file_info', expand('%c'), 'file_info.sh ' . expand('%c'))}%=💽 %a"

" set statusline="%t %20s %6E %6E= %-30d %a"
" set format of file modification time

" highlight statusline ctermbg=green ctermfg=blue cterm=none
set timefmt='%b %d, %Y @ %H:%M'
set statusline=" %A %10u:%-7g %6E 👉 %-20d %a"

" Don't highlight search results automatically
set nohlsearch

" Use increment searching (search while typing)
set incsearch


" hide the dot file by default, ! ensures that none of user-defined mappings will affect execution of Normal mode cmd
windo normal! zm


" ------------------------------------------------------------------------------

" Command used to edit files in various contexts.  The default is vim.
" If you would like to use another vi clone such as Elvis or Vile
" you will need to change this setting.

set vicmd=nvim
" set vicmd=elvis\ -G\ termcap
" set vicmd=vile

" This makes vifm perform file operations on its own instead of relying on
" standard utilities like `cp`.  While using `cp` and alike is a more universal
" solution, it's also much slower when processing large amounts of files and
" doesn't support progress measuring.

set syscalls

" Trash Directory
" The default is to move files that are deleted with dd or :d to
" the trash directory.  If you change this you will not be able to move
" files by deleting them and then using p to put the file in the new location.
" I recommend not changing this until you are familiar with vifm.
" This probably shouldn't be an option.

set trash

" This is how many directories to store in the directory history.

set history=1000

" Automatically resolve symbolic links on l or Enter.

set nofollowlinks

" With this option turned on you can run partially entered commands with
" unambiguous beginning using :! (e.g. :!Te instead of :!Terminal or :!Te<tab>).

" set fastrun

" Natural sort of (version) numbers within text.

set sortnumbers

" Maximum number of changes that can be undone.

set undolevels=100

" Use Vim's format of help file (has highlighting and "hyperlinks").
" If you would rather use a plain text help file set novimhelp.

set vimhelp

" If you would like to run an executable file when you
" press return on the file name set this.

set norunexec

" Selected color scheme

colorscheme solarized-dark

" Format for displaying time in file list. For example:
" TIME_STAMP_FORMAT=%m/%d-%H:%M
" See man date or man strftime for details.

set timefmt=%m/%d\ %H:%M

" Show list of matches on tab completion in command-line mode

set wildmenu

" Display completions in a form of popup with descriptions of the matches

set wildstyle=popup

" Display suggestions in normal, visual and view modes for keys, marks and
" registers (at most 5 files).  In other view, when available.

set suggestoptions=normal,visual,view,otherpane,keys,marks,registers

" Ignore case in search patterns unless it contains at least one uppercase
" letter

set ignorecase
set smartcase

" Don't highlight search results automatically

set nohlsearch

" Use increment searching (search while typing)
set incsearch

" Try to leave some space from cursor to upper/lower border in lists

set scrolloff=4

" Don't do too many requests to slow file systems

set slowfs=curlftpfs

" Set custom status line look

" set statusline="  Hint: %z%= %A %10u:%-7g %15s %20d  "

" ------------------------------------------------------------------------------

" :mark mark /full/directory/path [filename]
mark h ~/

" ------------------------------------------------------------------------------

" :com[mand][!] command_name action
" The following macros can be used in a command
" %a is replaced with the user arguments.
" %c the current file under the cursor.
" %C the current file under the cursor in the other directory.
" %f the current selected file, or files.
" %F the current selected file, or files in the other directory.
" %b same as %f %F.
" %d the current directory name.
" %D the other window directory name.
" %m run the command in a menu window

command! df df -h %m 2> /dev/null
command! diff vim -d %f %F
command! zip zip -r %f.zip %f
command! run !! ./%f
command! make !!make %a
command! mkcd :mkdir %a | cd %a
command! reload :write | restart

" define a fish func ViewVimTerm.fish that check file types and open it either with vim or termpdf
command! v !! ViewVimTerm %f
command! p !! pvd %f
command! o open $PWD


"------------------------------------------------------------------------------
" fileview
fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c, echo "No preview:"

" ignore the dot file (e.g., .git) in preview and show only two levels
if executable('tree')
	fileviewer */,.*/ tree -C -L 2 -I .git %c
endif


" avoid preview large files
" set previewcmd='$(stat -f "%z" %c) -le 5000000 && file %c'

" ------------------------------------------------------------------------------
" The file type is for the default programs to be used with
" a file extension.
" :filetype pattern1,pattern2 defaultprogram,program2
" :fileviewer pattern1,pattern2 consoleviewer
" The other programs for the file type can be accessed with the :file command
" The command macros %f, %F, %d, %F may be used in the commands.
" Spaces in an app name will have to be escaped e.g. QuickTime\ Player.app
" The %a macro is ignored.  To use a % you must put %%.

" For automated FUSE mounts, you must register an extension with :file[x]type
" in one of following formats:
"
" :filetype extensions FUSE_MOUNT|some_mount_command using %SOURCE_FILE and %DESTINATION_DIR variables
" %SOURCE_FILE and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.zip,*.jar,*.war,*.ear FUSE_MOUNT|fuse-zip %SOURCE_FILE %DESTINATION_DIR
"
" :filetype extensions FUSE_MOUNT2|some_mount_command using %PARAM and %DESTINATION_DIR variables
" %PARAM and %DESTINATION_DIR are filled in by vifm at runtime.
" A sample line might look like this:
" :filetype *.ssh FUSE_MOUNT2|sshfs %PARAM %DESTINATION_DIR
" %PARAM value is filled from the first line of file (whole line).
" Example first line for SshMount filetype: root@127.0.0.1:/
"
" You can also add %CLEAR if you want to clear screen before running FUSE
" program.


filetype *.ps,*.eps,*.ps.gz
        \ {View in zathura}
        \ zathura %f,
        \ {View in gv}
        \ gv %c %i &,

" .vim session file
filetype *.vim nvim %f

" .md file open with typora and view with mdcat "brew install mdcat"
filetype *.md open -a typora %f
fileviewer *.md mdcat %f
"fileviewer *.md bat %f

" .Rmd file open with code, no space between file types
filetype *.Rmd,*pmd,*.jmd code %f
" fileviewer *.Rmd,*.rmd mdcat %f

" .jl file open with code
filetype *.jl code %f

" .js file open with vs code
filetype *.js,*.css *.ts code %f


" .csv file open with scim
filetype *.csv sc-im %f

" .bib file open with Bibdesk
filetype *.bib /Applications/TeX/BibDesk.app/Contents/MacOS/BibDesk %f


" Pictures
filetype *.bmp,*.jpg,*.jpeg,*.png,*.xpm open -a Preview %f &
fileviewer *.bmp,*.jpg,*.jpeg,*.png,*.xpm
    \ kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py %c %N
    \ %pc
    \ kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py --clear %N

" Pdf
" Note: > /dev/null is used to avoid print out stdout info
" filetype *.pdf open -a Preview %f &
filetype *.pdf open -a Skim %f &
fileviewer *.pdf
        \ tput cup %py %px > /dev/tty && vips copy %c[dpi=300] /tmp/tempfile.jpg > /dev/null && kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py /tmp/tempfile.jpg %N
		\ %pc
		\ kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py --clear %N

" old method with sips or convert:
" \ tput cup %py %px > /dev/tty && sips -s format jpeg %c --out /tmp/tempfile.jpg > /dev/null&& kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py /tmp/tempfile.jpg %N
" \ tput cup %py %px > /dev/tty && convert -density 300 -quality 100 %c[0] /tmp/tempfile.jpg > /dev/null && kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py /tmp/tempfile.jpg %N



" pdftoppm -jpeg -f 1 -singlefile %c /tmp/tempfile


" Video
filetype *.gif,*.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,
        \*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,
        \*.as[fx]
       \ {Open in IINA}
       \ open -a IINA.app,
       \ {Open in QuickTime Player}
       \ open -a QuickTime\ Player.app,
       \ {Open in MPlayerX}
       \ open -a MPlayerX.app,
fileviewer *.avi,*.mp4,*.wmv,*.dat,*.3gp,*.ogv,*.mkv,*.mpg,*.mpeg,*.vob,*.fl[icv],*.m2v,*.mov,*.webm,*.mts,*.m4v,*.r[am],*.qt,*.divx,*.as[fx]
		   \ tput cup %py %px > /dev/tty && ffmpeg -y -hide_banner -loglevel panic -i %c -ss 00:00:01.000 -vframes 1 /tmp/tempfile.jpg > /dev/null && kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py /tmp/tempfile.jpg %N
		  \ %pc
		  \ kitty +kitten icat --transfer-mode=file --place=%pwx%ph@%pxx%py --clear %N
" alternative setting to fix the frame time: -ss 00:00:03.000 -vframes 1

" Web
filetype *.html,*.htm
       \ {Open in Chrome}
       \ open -a Google\ Chrome.app,
       \ {Open in Firefox}
       \ open -a Firefox.app,
       \ {Open in nvim}
       \ nvim,
fileviewer *.html,*.htm w3m %c

" Object
filetype *.o nm %f | less

" Man page
filetype *.[1-8] man ./%c
fileviewer *.[1-8] man ./%c | col -b


" MD5
filetype *.md5
       \ {Check MD5 hash sum}
       \ md5sum -c %f %S,

" SHA1
filetype *.sha1
       \ {Check SHA1 hash sum}
       \ sha1sum -c %f %S,

" SHA256
filetype *.sha256
       \ {Check SHA256 hash sum}
       \ sha256sum -c %f %S,

" SHA512
filetype *.sha512
       \ {Check SHA512 hash sum}
       \ sha512sum -c %f %S,

" Torrent
filetype *.torrent open -a Transmission.app
fileviewer *.torrent dumptorrent -v %c

" Extract zip files
filetype *.zip unzip %f
fileviewer *.zip,*.jar,*.war,*.ear zip -sf %c

" Extract tar archives
filetype *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -xf %f
fileviewer *.tar,*.tar.bz2,*.tbz2,*.tgz,*.tar.gz tar -tf %f

" Extract .bz2 archives
filetype *.bz2 bzip2 -d %f

" Extract .gz files
filetype *.gz gunzip %f

" Mount .dmg archives
filetype *.dmg open

" Mount disk .img
filetype *.img open

" Open .pkg binaries
filetype *.pkg open

" Office files
filetype *.odt,*.doc,*.docx,*.xls,*.xlsx,*.odp,*.pptx,*.ppt open -a LibreOffice.app
" fileviewer *.doc catdoc -
" fileviewer *.docx, *.doc docx2txt.pl %c -
fileviewer {*.doc},<application/msword> antiword -
fileviewer {*.docx},
          \<application/
           \vnd.openxmlformats-officedocument.wordprocessingml.document>
         \ docx2txt.pl %f -


" Syntax highlighting in preview
"
" Explicitly set highlight type for some extensions
"
" 256-color terminal
"fileviewer *.[ch],*.[ch]pp highlight -O xterm256 -s dante --syntax c %c
"fileviewer Makefile,Makefile.* highlight -O xterm256 -s dante --syntax make %c
"
" 16-color terminal
"fileviewer *.c,*.h highlight -O ansi -s dante %c
"
" Or leave it for automatic detection
"
"fileviewer *[^/] pygmentize -O style=monokai -f console256 -g

" For OS X:
" filetype * open
" file types
set classify=' :dir:/, :exe:, :reg:, :link:'
" various file names
set classify+=' ::../::, ::*.sh::, ::*.[hc]pp::, ::*.[hc]::, ::/^copying|license$/::, ::.git/,,*.git/::, ::*.epub,,*.fb2,,*.djvu::, ::*.pdf::, ::*.htm,,*.html,,**.[sx]html,,*.xml::'
" archives
set classify+=' ::*.7z,,*.ace,,*.arj,,*.bz2,,*.cpio,,*.deb,,*.dz,,*.gz,,*.jar,,*.lzh,,*.lzma,,*.rar,,*.rpm,,*.rz,,*.tar,,*.taz,,*.tb2,,*.tbz,,*.tbz2,,*.tgz,,*.tlz,,*.trz,,*.txz,,*.tz,,*.tz2,,*.xz,,*.z,,*.zip,,*.zoo::'
" images
set classify+=' ::*.bmp,,*.gif,,*.jpeg,,*.jpg,,*.ico,,*.png,,*.ppm,,*.svg,,*.svgz,,*.tga,,*.tif,,*.tiff,,*.xbm,,*.xcf,,*.xpm,,*.xspf,,*.xwd::'
" audio
set classify+=' ::*.aac,,*.anx,,*.asf,,*.au,,*.axa,,*.flac,,*.m2a,,*.m4a,,*.mid,,*.midi,,*.mp3,,*.mpc,,*.oga,,*.ogg,,*.ogx,,*.ra,,*.ram,,*.rm,,*.spx,,*.wav,,*.wma,,*.ac3::'
" media
set classify+=' ::*.avi,,*.ts,,*.axv,,*.divx,,*.m2v,,*.m4p,,*.m4v,,.mka,,*.mkv,,*.mov,,*.mp4,,*.flv,,*.mp4v,,*.mpeg,,*.mpg,,*.nuv,,*.ogv,,*.pbm,,*.pgm,,*.qt,,*.vob,,*.wmv,,*.xvid::'
" office files
set classify+=' ::*.doc,,*.docx::, ::*.xls,,*.xls[mx]::, ::*.pptx,,*.ppt::'



" ------------------------------------------------------------------------------

" What should be saved automatically between vifm sessions.  Drop "savedirs"
" value if you don't want vifm to remember last visited directories for you.
set vifminfo=dhistory,savedirs,chistory,state,tui,shistory,
    \phistory,fhistory,dirstack,registers,bookmarks,bmarks

" bookmarks
nmap bb :marks <cr>
mark h ~
mark d ~/Documents/
mark D ~/Downloads/
mark g /Users/jakejing/GoogleDrive
mark t /Users/jakejing/.config/vifm/Trash/
"mark o /Users/jakejing/switchdrive/ICHL-UraTyp/Main
mark r /Users/jakejing/switchdrive/rwd
mark l /Users/jakejing/switchdrive/DLM-distribution/Main
mark p /Users/jakejing/switchdrive/pywd
mark y /Users/jakejing/switchdrive/rwd/phylogenetic-tools
mark n /Users/jakejing/.config/nvim/lua/yq
" ------------------------------------------------------------------------------

" Examples of configuring both panels

" Customize view columns a bit (enable ellipsis for truncated file names)
"
" set viewcolumns=-{name}..,6{}.

" Filter-out build and temporary files
"
" filter! /^.*\.(lo|o|d|class|py[co])$|.*~$/

" ------------------------------------------------------------------------------

" Sample mappings

" mapping to create new blank file
nnoremap to :touch<space>

" mapping to create new folder
nnoremap mkd :mkdir<space>

" Map the key to view pdf with termpdf
nnoremap tp :!vp %f<cr>

" Start shell in current directory
" nnoremap s :shell<cr>
nnoremap s :!fish <cr>
" if you cannot change the default shell, you can use "nnoremap s:!fish<cr>"


" Display sorting dialog
nnoremap S :sort<cr>

" Toggle visibility of preview window
nnoremap w :view<cr>
vnoremap w :view<cr>gv

" Open file in new MacVim tab
nnoremap o :!mvim --remote-tab-silent %f<cr>
" Open file in new MacVim window
nnoremap O :!mvim %f<cr>

" Open file in the background using its default program
nnoremap gb :!open -g %f<cr>


" Yank current directory path into the clipboard
nnoremap yd :!printf %d | pbcopy<cr>

" Yank current file path into the clipboard
nnoremap yf :!printf %c:p | pbcopy<cr>

" yank current filename without path into the clipboard
nnoremap yn :!echo -n %c | pbcopy %i<cr>

" yank root of current file's name into the clipboard
nnoremap yr :!echo -n %c:r | pbcopy %i<cr>


" View preview in Quick Look
nnoremap q :!qlmanage -p %f > /dev/null 2>&1<cr>
" Unhide builtin q* keymaps
nnoremap q: q:
nnoremap q/ q/
nnoremap q? q?
nnoremap q= q=

" Mappings for faster renaming
nnoremap I cw<c-a>
nnoremap cc cw<c-u>
" rename with extension
nnoremap A cw
" rename withou extension
nnoremap a cW




" Open editor to edit vifmrc and apply settings after returning to vifm
nnoremap ,c :write | edit $MYVIFMRC | restart<cr>
" Open MacVim to edit vifmrc
nnoremap ,C :!mvim --remote-tab-silent $MYVIFMRC &<cr>

" Toggle wrap setting on ,w key
nnoremap ,w :set wrap!<cr>

" Example of standard two-panel file managers mappings
nnoremap <f3> :!less %f<cr>
nnoremap <f4> :edit<cr>
nnoremap <f5> :copy<cr>
nnoremap <f6> :move<cr>
nnoremap <f7> :mkdir<space>
nnoremap <f8> :delete<cr>

" ------------------------------------------------------------------------------

" Various customization examples

" Use ag (the silver searcher) instead of grep
"
" set grepprg='ag --line-numbers %i %a %s'

" Add additional place to look for executables
"
" let $PATH = $HOME.'/bin/fuse:'.$PATH

" Block particular shortcut
"
" nnoremap <left> <nop>

" Export IPC name of current instance as environment variable and use it to
" communicate with the instance later.
"
" It can be used in some shell script that gets run from inside vifm, for
" example, like this:
"     vifm --server-name "$VIFM_SERVER_NAME" --remote +"cd '$PWD'"
"
" let $VIFM_SERVER_NAME = v:servername
